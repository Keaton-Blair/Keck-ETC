#!/bin/bash

# Get directory of this script
PROGRAM_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Define script variables to default values
version="0.0.1"
port=5006
printhelp=false
printversion=false
forcekill=false
statusall=true
server="none"
action="none"
usage=$(cat << END
Usage: $PROGRAM_DIR/etc {start,stop,status,restart,test} [-f] [-h] [-v] [-p port_number]
    Positional arguments: {start,stop,status,restart,test}
        start           Begin running a server, requires additional argument 'gui' or 'api'
        stop            Stop running a server, requires additional argument 'gui' or 'api'
        status          Print server status, accepts optional argument 'gui' or 'api'
        restart         Restart a server, requires additional argument 'gui' or 'api'
        test            Verify successful program installation
    Optional arguments:
        -p, --port      Specifies port for server, defaults to 5006
        -f, --force     Force kill running server, use with 'stop' or 'restart'
        -v, --version   Display program version
        -h, --help      Displays this message
END
)


# Get command line arguments and set appropriate variables
# TODO -- add test command to verify installation
while [[ -n $1 ]]; do
    case $1 in
        gui | api ) server="$1";;
        start | stop | status | restart | test ) action="$1";;
        -h | --help ) printhelp=true;;
        -v | --version ) printversion=true;;
        -p | --port ) shift; port=$1; statusall=false;;
        -f | --force ) forcekill=true;;
        * ) 
            echo "Invalid option: $1"
            echo "$usage"
            exit -1;;
    esac
    shift
done

# If help, print usage
if $printhelp; then
    echo "$usage"
    exit 0
fi

# If version, print version
if $printversion; then
    echo "etc $version"
    exit 0
fi

# Validate input
if [ "$action" == "none" ]; then
    echo "Missing required positional argument {start,stop,status,restart}" >&2
    echo "$usage" >&2
    exit -1
fi
if [ "$action" != "status" ] && [ "$action" != "test" ] && [ "$server" == "none" ]; then
    echo "Missing required additional argument 'gui' or 'api' for argument $action" >&2
    echo "$usage" >&2
    exit -1
fi
if ! [[ $port =~ ^[0-9]+$ ]]; then
    echo "Invalid port number $port" >&2
    exit -1
fi


# Navigate to base directory for ETC
cd $PROGRAM_DIR

# If command is stop or restart, stop corresponding server
if [ "$action" == "stop" ] || [ "$action" == "restart" ]; then

    pid="$(tac ./log/etc.log | grep -m1 "start $server $port" | awk '{print $NF}')"
    if $forcekill; then
        err="$(kill -SIGKILL $pid 2>&1)"
    else
        err="$(kill $pid 2>&1)"
    fi
    # If an error exists, then print error message and exit
    if [[ ! -z $err ]]; then 
        printf "Error terminating $server server on port $port \n$err\n" >&2
        exit -1
    fi
    # If no error was detected, print success message and append to log
    echo "Succesfully terminated $server server on port $port"
    echo "$(date +"%Y-%m-%d %T") stop $server $port $pid" >> ./log/etc.log

fi

if [ "$action" == "start" ] || [ "$action" == "restart" ]; then

    echo "Starting $server server on port $port"

    # TODO -- check to make sure port is not in use, then verify that it worked and output success message

    if [ "$server" == "gui" ]; then
        nohup bokeh serve . --port "$port" --log-file ./log/gui.log --allow-websocket-origin="$(hostname -I | sed -r 's/\s+//g'):$port" &>/dev/null &
        echo "$(date +"%Y-%m-%d %T") start $server $port $!" >> ./log/etc.log

    elif [ "$server" == "api" ]; then

        nohup python3 API.py >> ./log/api.log &>/dev/null &
        echo "$(date +"%Y-%m-%d %T") start $server $port $!"

    fi
fi

if [ "$action" == "status" ]; then

    if $statusall; then port="*"; fi

    if [ "$server" == "none" ]; then server="*"; fi
    
    echo "Checking status of server $server on port $port"

    apiports=""
    guiports=""

    while read -r log; do
        log=($log)
        pid=${log[5]}
        if ps -p $pid > /dev/null; then
            if [[ ${log[3]} == "gui" && "$(ps $pid)" == *"bokeh serve"* ]]; then
                guiports+="${log[4]}, "
            elif [[ ${log[3]} == "api" && "$(ps $pid)" == *"python3 API.py"* ]]; then
                apiports+="${log[4]}, "
            fi
        fi
    done < <(grep "start $server $port" ./log/etc.log)

    # Write status to stdout
    if [[ $(echo $apiports | wc -w) -gt 1 ]]; then
        echo "Running $(echo $apiports | wc -w) API servers on ports ${apiports%??}"
    elif [[ $(echo $apiports | wc -w) -gt 0 ]]; then
        echo "Running $(echo $apiports | wc -w) API server on port ${apiports%??}"
    elif [ "$server" != "gui" ]; then
        echo "No API servers running on port $port"
    fi

    if [[ $(echo $guiports | wc -w) -gt 1 ]]; then
        echo "Running $(echo $guiports | wc -w) GUI servers on ports ${guiports%??}"
    elif [[ $(echo $guiports | wc -w) -gt 0 ]]; then
        echo "Running $(echo $guiports | wc -w) GUI server on port ${guiports%??}"
    elif [ "$server" != "api" ]; then
        echo "No GUI servers running on port $port"
    fi


fi


if [ "$action" == "test" ]; then

    if ! command -v git &> /dev/null; then
        echo "Error verifying installation, git is not installed" >&2
    fi

    status="$(git status --porcelain)"

    if [ "$status" == *"not a git repository"* ]; then
        echo "Error: Can't check files against source because this is not a git repository" >&2
    elif [ "$status" != "" ]; then
        echo "Git has detected the following changes to your local files"
        echo "$status"
        exit 0
    fi

    if [ "$(python3 --version)" == *"command not found"* ]; then
        echo "Python3 is not installed -- run 'sudo apt-get install python3' to correct"
        exit 0
    fi

    if [ "$(echo "import astropy" | python3)" != "" ]; then
        echo "Astropy is not installed -- run 'pip install astropy' to correct"
        exit 0
    fi

    if [ "$(echo "import scipy" | python3)" != "" ]; then
        echo "Scipy is not installed -- run 'pip install scipy' to correct"
        exit 0
    fi

    if [ "$(bokeh --version)" == *"command not found"* ]; then
        echo "Bokeh is not installed -- run 'pip install bokeh' to correct"
        exit 0
    fi

    echo "No problems detected, succesful installation verified"
    exit 0

fi


exit 0