# Copyright (c) 2022, W. M. Keck Observatory
# All rights reserved.

# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. 



#!/bin/bash

# Get directory of this script
PROGRAM_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Define script variables to default values
version="0.0.1"
port=8080
printhelp=false
printversion=false
warn=false
forcekill=false
statusall=true
action="none"
log="log/etc.log"
usage=$(cat << END
Usage: $PROGRAM_DIR/etc-api {start,stop,status,restart,test} [-f] [-h] [-v] [-w] [-p port_number] [-l log_file]
    Positional arguments: {start,stop,status,restart,test}
        start           Begin running the server
        stop            Stop running the server
        status          Print server status
        restart         Restart the server
        test            Verify successful program installation
    Optional arguments:
        -p, --port      Specifies port for server, defaults to 8080
        -f, --force     Force kill running server, use with 'stop' or 'restart'
        -l, --log       Path to logfile, defaults to ./log/etc.log
        -w, --warn      Log python warnings, ignored by default
        -v, --version   Display program version
        -h, --help      Displays this message
END
)


# Get command line arguments and set appropriate variables
# TODO -- add test command to verify installation
while [[ -n $1 ]]; do
    case $1 in
        start | stop | status | restart | test ) action="$1";;
        -h | --help ) printhelp=true;;
        -v | --version ) printversion=true;;
        -p | --port ) shift; port=$1; statusall=false;;
        -f | --force ) forcekill=true;;
        -l | --log ) shift; log=$1;;
        -w | --warn ) warn=true;;
        * ) 
            echo "Invalid option: $1"
            echo "$usage"
            exit -1;;
    esac
    shift
done

# If help, print usage
if $printhelp; then
    echo "$usage"
    exit 0
fi

# If version, print version
if $printversion; then
    echo "etc-api $version"
    exit 0
fi

# Validate input
if [ "$action" == "none" ]; then
    echo "Missing required positional argument {start,stop,status,restart,test}" >&2
    echo "$usage" >&2
    exit -1
fi
if ! [[ $port =~ ^[0-9]+$ ]]; then
    echo "Invalid port number $port" >&2
    exit -1
fi
if [[ ! -f "$log" ]]; then
    echo "Error: log file $log does not exist" >&2
    exit -1
fi


# Navigate to base directory for ETC
cd $PROGRAM_DIR

# TODO -- get info here, print if action = status, then do stop, restart, start accordingly

# If command is stop or restart, stop corresponding server
if [ "$action" == "stop" ] || [ "$action" == "restart" ]; then

    log="$(tac ./log/etc.log | grep -m1 "$port * Server started")"
    ip="$(echo $log | awk '{print $1;}')"
    pid="$(echo $log | cut -d " " -f8)"

    # TODO -- check log for "Server stopped" with date > "Server started" and output accordingly
    if [[ -z $pid ]]; then
        echo "Error: could not find server running on port $port" >&2
        exit -1
    fi

    if $forcekill; then
        err="$(kill -SIGKILL $pid 2>&1)"
    else
        err="$(kill $pid 2>&1)"
    fi

    # If an error exists, then print error message and exit
    if [[ ! -z $err ]]; then 
        printf "Error terminating server on port $port \n$err\n" >&2
        exit -1
    fi
    # If no error was detected, print success message and append to log
    echo "Succesfully terminated server on port $port"
    echo "$ip - - [$[date +"%d/%b/%Y %H:%M:%S"]] \"Server stopped\" $pid -" >> "$log"

fi

if [ "$action" == "start" ] || [ "$action" == "restart" ]; then

    echo "Starting server on port $port"

    # TODO -- check to make sure port is not in use, then verify that it worked and output success message
    # TODO -- use -W ignore to supress warnings by default, include option for verbose logging where warnings are output...

    nohup python3 -u API.py &>"$log" &
    pid="$!"

    # Wait to see evidence of successful start in log
    started=false
    timer=$SECONDS
    while [ !$started ]; do
        log="$(tac ./log/etc.log | grep -m1 "$port * \"Server started\" $pid")"
        if [[ ! -z $log ]]; then
            started=true
        fi
        # Timeout after 10 seconds with no results
        if (( $SECONDS > $timer + 10 )); then
            break
        fi
    done

    if $started; then
        echo "Succesfully started server on port $port with pid $pid"
    else
        echo "Error: timed out while waiting for confirmation of server start"
        exit -1
    fi

fi

# TODO -- fix status command
if [ "$action" == "status" ]; then

    if $statusall; then port="*"; fi
    
    echo "Checking status of server on port $port"

    apiports=""

    while read -r log; do
        log=($log)
        pid=${log[5]}
        if ps -p $pid > /dev/null; then
            elif [[ ${log[3]} == "api" && "$(ps $pid)" == *"python3 API.py"* ]]; then
                apiports+="${log[4]}, "
            fi
        fi
    done < <(grep "start $server $port" ./log/etc.log)

    # Write status to stdout
    if [[ $(echo $apiports | wc -w) -gt 1 ]]; then
        echo "Running $(echo $apiports | wc -w) API servers on ports ${apiports%??}"
    elif [[ $(echo $apiports | wc -w) -gt 0 ]]; then
        echo "Running $(echo $apiports | wc -w) API server on port ${apiports%??}"
    elif [ "$server" != "gui" ]; then
        echo "No API servers running on port $port"
    fi

    if [[ $(echo $guiports | wc -w) -gt 1 ]]; then
        echo "Running $(echo $guiports | wc -w) GUI servers on ports ${guiports%??}"
    elif [[ $(echo $guiports | wc -w) -gt 0 ]]; then
        echo "Running $(echo $guiports | wc -w) GUI server on port ${guiports%??}"
    elif [ "$server" != "api" ]; then
        echo "No GUI servers running on port $port"
    fi


fi


if [ "$action" == "test" ]; then

    if ! command -v git &> /dev/null; then
        echo "Error verifying installation, git is not installed" >&2
    fi

    status="$(git status --porcelain)"

    if [ "$status" == *"not a git repository"* ]; then
        echo "Error: Can't check files against source because this is not a git repository" >&2
    elif [ "$status" != "" ]; then
        echo "Git has detected the following changes to your local files"
        echo "$status"
        exit 0
    fi

    if [ "$(python3 --version)" == *"command not found"* ]; then
        echo "Python3 is not installed -- run 'sudo apt-get install python3' to correct"
        exit 0
    fi

    if [ "$(echo "import astropy" | python3)" != "" ]; then
        echo "Astropy is not installed -- run 'pip install astropy' to correct"
        exit 0
    fi

    if [ "$(echo "import scipy" | python3)" != "" ]; then
        echo "Scipy is not installed -- run 'pip install scipy' to correct"
        exit 0
    fi

    echo "No problems detected, succesful installation verified"
    exit 0

fi


exit 0